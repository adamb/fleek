{"version":3,"sources":["ethereum.js","App.js","index.js"],"names":["getBlockchain","Promise","resolve","reject","window","addEventListener","a","ethereum","enable","provider","ethers","providers","Web3Provider","signer","getSigner","nft","Contract","NFT","networks","networkVersion","address","abi","undefined","App","useState","tokenInfo","setTokenInfo","useEffect","init","tokenURI","axios","get","data","result","className","name","description","src","image","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAuBeA,EApBO,kBACpB,IAAIC,SAAQ,SAACC,EAASC,GACpBC,OAAOC,iBAAiB,OAAxB,sBAAgC,gCAAAC,EAAA,0DAC3BF,OAAOG,SADoB,gCAEtBH,OAAOG,SAASC,SAFM,OAGtBC,EAAW,IAAIC,IAAOC,UAAUC,aAAaR,OAAOG,UACpDM,EAASJ,EAASK,YAElBC,EAAM,IAAIC,IACdC,EAAIC,SAASd,OAAOG,SAASY,gBAAgBC,QAC7CH,EAAII,IACJR,GAGFX,EAAQ,CAACa,QAZmB,OAc9Bb,EAAQ,CAACa,SAAKO,IAdgB,gD,yBCiCrBC,MAlCf,WACE,MAAkCC,wBAASF,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAYA,OAVAC,qBAAU,WACR,IAAMC,EAAI,uCAAG,oCAAAtB,EAAA,sEACWN,IADX,uBACHe,EADG,EACHA,IADG,SAEYA,EAAIc,SAAS,GAFzB,cAELA,EAFK,gBAGYC,IAAMC,IAAIF,GAHtB,gBAGHG,EAHG,EAGHA,KACRN,EAAaM,EAAKC,QAJP,4CAAH,qDAMVL,MACC,IAEqB,qBAAdH,EACD,aAIP,qBAAKS,UAAU,YAAf,SAEE,qBAAKA,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,cAAd,SAA6BT,EAAUU,OACvC,sBAAKD,UAAU,YAAf,UACE,mBAAGA,UAAU,mBAAb,SAAiCT,EAAUW,cAC3C,qBAAKC,IAAKZ,EAAUa,MAAOJ,UAAU,yB,OCxBjDK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.19167952.chunk.js","sourcesContent":["import { ethers, Contract } from 'ethers';\nimport NFT from './contracts/NFT.json';\n\nconst getBlockchain = () =>\n  new Promise((resolve, reject) => {\n    window.addEventListener('load', async () => {\n      if(window.ethereum) {\n        await window.ethereum.enable();\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n\n        const nft = new Contract(\n          NFT.networks[window.ethereum.networkVersion].address,\n          NFT.abi,\n          signer\n        );\n\n        resolve({nft});\n      }\n      resolve({nft: undefined});\n    });\n  });\n\nexport default getBlockchain;\n","import React, { useState, useEffect } from 'react';\nimport getBlockchain from './ethereum.js';\nimport axios from 'axios';\n\nfunction App() {\n  const [tokenInfo, setTokenInfo] = useState(undefined);\n\n  useEffect(() => {\n    const init = async () => {\n      const { nft } = await getBlockchain();\n      const tokenURI = await nft.tokenURI(0);\n      const { data } = await axios.get(tokenURI);\n      setTokenInfo(data.result);\n    };\n    init();\n  }, []);\n\n  if(typeof tokenInfo === 'undefined') {\n    return 'Loading...';\n  }\n\n  return (\n    <div className='container'>\n\n      <div className='row'>\n        <div className='col-sm-12'>\n          <h1 className='text-center'>{tokenInfo.name}</h1>\n          <div className=\"jumbotron\">\n            <p className=\"lead text-center\">{tokenInfo.description}</p>\n            <img src={tokenInfo.image} className=\"img-fluid\" />\n          </div>\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}